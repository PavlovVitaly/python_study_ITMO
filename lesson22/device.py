# coding: utf-8import itertoolsimport platformfrom abc import ABCMeta, abstractmethodfrom glob import globfrom time import sleepfrom pyfirmata import Arduino, OUTPUTclass CubeDevice(object):    green_pins = [6, 10]    red_pins = [5, 9]    def __init__(self):        self.board = None    def __del__(self):        self.disconnect()    def _write_pins(self, pins, value):        for p in pins:            self.board.digital[p].write(value)    def blink(self, pins, delay=1):        self._write_pins(pins, 1)        sleep(delay)        self._write_pins(pins, 0)    def blink_green(self, delay=1):        self.blink(self.green_pins, delay)    def blink_red(self, delay=1):        self.blink(self.red_pins, delay)    def connect(self, port):        self.board = Arduino(port)        self.board.digital[13].mode = OUTPUT        for p in self.green_pins + self.red_pins:            self.board.digital[p].mode = OUTPUT        self.blink([13], 2)    def disconnect(self):        if not self.board:            return        self._write_pins(self.red_pins, 0)        self._write_pins(self.green_pins, 0)        self.board.digital[13].write(0)class DeviceFinder(metaclass=ABCMeta):    @abstractmethod    def discover(self):        pass    @classmethod    def get_instance(cls):        if platform.system() == 'Windows':            return WindowsDeviceFinder()        elif platform.system() == 'Darwin':            return DarwinDeviceFinder()        else:            return LinuxDeviceFinder()class PosixDeviceFinder(DeviceFinder):    def _discover_posix(self, patterns):        for p in patterns:            for match in glob(p):                yield matchclass LinuxDeviceFinder(PosixDeviceFinder):    def discover(self):        return list(self._discover_posix(['/dev/ttyACM*', '/dev/ttyUSB*']))class DarwinDeviceFinder(PosixDeviceFinder):    def discover(self):        return list(self._discover_posix(['/dev/tty.usbmodem*', '/dev/tty.usbserial*']))class WindowsDeviceFinder(DeviceFinder):    def discover(self):        path = r'HARDWARE\DEVICEMAP\SERIALCOMM'        try:            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, path)        except WindowsError:            return        for i in itertools.count():            try:                val = winreg.EnumValue(key, i)                yield str(val[1])            except EnvironmentError:                break