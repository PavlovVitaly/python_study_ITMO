# Сокетыimport argparseimport socketfrom datetime import datetimefrom lesson22.config import Config"""Мы создали Ethernet TCP сокетwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:    Установка опций сокету    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)    (ip, port) - адрес    s.bind((ip, port)) привязка сокета к адресу    установка сокета на прослушивание входящих соединений    s.listen(10)    conn, addr = s.accept()    conn - сокет клиента (того кто подключился)    addr - адрес клиента (ip, port)"""class TechnoCubeServer(object):    def __init__(self, config):        self.__config = Config(config)    def configure(self):        pass    def listen(self):        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)            s.bind((self.__config.ip, self.__config.port))            s.listen(1)            while 1:                conn, addr = s.accept()                with conn:                    msg = conn.recv(8192)  # 8Kb                    msg = msg.decode('utf-8').strip()                    self.log(addr, msg)                    if msg:                        msg = morse.encode(msg)                        conn.send(msg.encode('utf-8'))    def log(self, addr, msg):        template = '[{:%Y-%m-%d %H:%M:%S}] {} {}'        print(template.format(datetime.now(), addr, msg))if __name__ == '__main__':    parser = argparse.ArgumentParser(description='Технокуб')    parser.add_argument('-c',                        '--config',                        help='Конфигурационный файл',                        default='config.ini')    subparsers = parser.add_subparsers()    parser_init = subparsers.add_parser('init',                                        help='Инициализация',                                        description='Поиск платы Arduino и создание конфигурационного файла')    parser_init.set_defaults(callback=lambda: server.configure())    parser_server = subparsers.add_parser('listen',                                          help='Запустить сервер',                                          description='Запустить сервер оповещений')    parser_server.set_defaults(callback=lambda: server.listen())    arguments = vars(parser.parse_args())    config = arguments.pop('config')    server = TechnoCubeServer(config)    if 'callback' in arguments:        callback = arguments.pop('callback')        callback(**arguments)    else:        parser.print_help()